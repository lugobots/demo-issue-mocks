// Code generated by MockGen. DO NOT EDIT.
// Source: mydemo/bar (interfaces: DoShomething,MoreStuff)

// Package testdata is a generated GoMock package.
package testdata

import (
	gomock "github.com/golang/mock/gomock"
	bar "mydemo/bar"
	reflect "reflect"
)

// MockDoShomething is a mock of DoShomething interface
type MockDoShomething struct {
	ctrl     *gomock.Controller
	recorder *MockDoShomethingMockRecorder
}

// MockDoShomethingMockRecorder is the mock recorder for MockDoShomething
type MockDoShomethingMockRecorder struct {
	mock *MockDoShomething
}

// NewMockDoShomething creates a new mock instance
func NewMockDoShomething(ctrl *gomock.Controller) *MockDoShomething {
	mock := &MockDoShomething{ctrl: ctrl}
	mock.recorder = &MockDoShomethingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDoShomething) EXPECT() *MockDoShomethingMockRecorder {
	return m.recorder
}

// DoIt mocks base method
func (m *MockDoShomething) DoIt() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoIt")
	ret0, _ := ret[0].(bool)
	return ret0
}

// DoIt indicates an expected call of DoIt
func (mr *MockDoShomethingMockRecorder) DoIt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoIt", reflect.TypeOf((*MockDoShomething)(nil).DoIt))
}

// DoThat mocks base method
func (m *MockDoShomething) DoThat() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoThat")
	ret0, _ := ret[0].(string)
	return ret0
}

// DoThat indicates an expected call of DoThat
func (mr *MockDoShomethingMockRecorder) DoThat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoThat", reflect.TypeOf((*MockDoShomething)(nil).DoThat))
}

// MockMoreStuff is a mock of MoreStuff interface
type MockMoreStuff struct {
	ctrl     *gomock.Controller
	recorder *MockMoreStuffMockRecorder
}

// MockMoreStuffMockRecorder is the mock recorder for MockMoreStuff
type MockMoreStuffMockRecorder struct {
	mock *MockMoreStuff
}

// NewMockMoreStuff creates a new mock instance
func NewMockMoreStuff(ctrl *gomock.Controller) *MockMoreStuff {
	mock := &MockMoreStuff{ctrl: ctrl}
	mock.recorder = &MockMoreStuffMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMoreStuff) EXPECT() *MockMoreStuffMockRecorder {
	return m.recorder
}

// AskTodo mocks base method
func (m *MockMoreStuff) AskTodo() bar.DoShomething {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AskTodo")
	ret0, _ := ret[0].(bar.DoShomething)
	return ret0
}

// AskTodo indicates an expected call of AskTodo
func (mr *MockMoreStuffMockRecorder) AskTodo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskTodo", reflect.TypeOf((*MockMoreStuff)(nil).AskTodo))
}

// TryToDo mocks base method
func (m *MockMoreStuff) TryToDo(arg0 bar.DoShomething) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryToDo", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// TryToDo indicates an expected call of TryToDo
func (mr *MockMoreStuffMockRecorder) TryToDo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryToDo", reflect.TypeOf((*MockMoreStuff)(nil).TryToDo), arg0)
}
